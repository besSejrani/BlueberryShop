{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/bes/react/typescript/raspberryShop/Client/Layout/Theme.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { grey, blue } from \"@material-ui/core/colors\"; // import { useSelector } from \"react-redux\";\n// import { IAppState } from \"../redux/rootReducer\";\n\nconst Theme = props => {\n  //   const isDarkTheme = useSelector((state: IAppState) => state.ui.isDarkTheme);\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: grey[900]\n      },\n      secondary: {\n        main: blue[500]\n      },\n      //   type: isDarkTheme ? \"dark\" : \"light\",\n      type: \"light\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Theme; // =================================================================\n\nexport const withTheme = Component => {\n  return props => {\n    return /*#__PURE__*/_jsxDEV(Theme, {\n      children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  };\n};","map":{"version":3,"sources":["/home/bes/react/typescript/raspberryShop/Client/Layout/Theme.tsx"],"names":["createMuiTheme","ThemeProvider","grey","blue","Theme","props","theme","palette","primary","main","secondary","type","children","withTheme","Component"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,0BAA3B,C,CACA;AACA;;AAEA,MAAMC,KAAoB,GAAIC,KAAD,IAAW;AACtC;AAEA,QAAMC,KAAK,GAAGN,cAAc,CAAC;AAC3BO,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAEP,IAAI,CAAC,GAAD;AADH,OADF;AAIPQ,MAAAA,SAAS,EAAE;AACTD,QAAAA,IAAI,EAAEN,IAAI,CAAC,GAAD;AADD,OAJJ;AAOP;AACAQ,MAAAA,IAAI,EAAE;AARC;AADkB,GAAD,CAA5B;AAaA,sBAAO,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEL,KAAtB;AAAA,cAA8BD,KAAK,CAACO;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;AAmBA,eAAeR,KAAf,C,CAEA;;AAEA,OAAO,MAAMS,SAAS,GAAIC,SAAD,IAAe;AACtC,SAAQT,KAAD,IAAW;AAChB,wBACE,QAAC,KAAD;AAAA,6BACE,QAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND;AAOD,CARM","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { grey, blue } from \"@material-ui/core/colors\";\n// import { useSelector } from \"react-redux\";\n// import { IAppState } from \"../redux/rootReducer\";\n\nconst Theme: React.FC<any> = (props) => {\n  //   const isDarkTheme = useSelector((state: IAppState) => state.ui.isDarkTheme);\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: grey[900],\n      },\n      secondary: {\n        main: blue[500],\n      },\n      //   type: isDarkTheme ? \"dark\" : \"light\",\n      type: \"light\",\n    },\n  });\n\n  return <ThemeProvider theme={theme}>{props.children}</ThemeProvider>;\n};\n\nexport default Theme;\n\n// =================================================================\n\nexport const withTheme = (Component) => {\n  return (props) => {\n    return (\n      <Theme>\n        <Component {...props} />\n      </Theme>\n    );\n  };\n};\n"]},"metadata":{},"sourceType":"module"}