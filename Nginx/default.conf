upstream client {
    server client:3000;
}
upstream server {
    server server:4000;
}

#Virtual server host
#Redirect all trafic to HTTPS
server{
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}


server {
    #Port Nginx should listen to and HTTP version
    #No SSL is used, actually its TLS
    listen 443 ssl http2;

    #Define server name, ip address, localhost, domain name, ...
    server_name localhost;

    #Disable SSL
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Optimise cipher suits
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    #Enable DH(Diffie-Hellman) params, alow to do key exchange with perfect secrety
    # ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    #Enable HSTS (HTTP Strict Transport Security)
    #Header telling to load nothing over HTTP
    add_header Strict-Transport-Security 'max-age=31536000' always;

    #TLS sessions, cache TLS handshake
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;

    #Specify path to SSL/TLS certificate and public key
    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;

    #Avoid X-Frame, can leed to clickjacking attack
    add_header X-Frame-Options "SAMEORIGIN";

    #Mitigate XSS attacks
    add_header X-XSS-Protection "1; mode=block";

    #
    add_header X-Content-Type-Options "nosniff";


    location / {
        proxy_pass http://client;
    }

    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /server {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://server;
    }

}